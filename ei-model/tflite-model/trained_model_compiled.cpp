/* Generated by Edge Impulse
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */
// Generated on: 23.10.2022 03:24:55

#include <stdio.h>
#include <stdlib.h>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

#ifndef EI_MAX_SCRATCH_BUFFER_COUNT
#define EI_MAX_SCRATCH_BUFFER_COUNT 4
#endif // EI_MAX_SCRATCH_BUFFER_COUNT

#ifndef EI_MAX_OVERFLOW_BUFFER_COUNT
#define EI_MAX_OVERFLOW_BUFFER_COUNT 10
#endif // EI_MAX_OVERFLOW_BUFFER_COUNT

using namespace tflite;
using namespace tflite::ops;
using namespace tflite::ops::micro;

namespace {

constexpr int kTensorArenaSize = 9040;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[23];
TfLiteEvalTensor tflEvalTensors[23];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[11];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,3960 } };
const TfArray<1, float> quant0_scale = { 1, { 0.0037071078550070524, } };
const TfArray<1, int> quant0_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 400, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(16) int32_t tensor_data2[8] = { 14757, 4209, -5759, 18341, 5248, -518, 8600, 6073, };
const TfArray<1, int> tensor_dimension2 = { 1, { 8 } };
const TfArray<8, float> quant2_scale = { 8, { 7.8388302426901646e-06, 9.0853973233606666e-06, 1.6782096281531267e-05, 8.5307519839261658e-06, 1.0709291018429212e-05, 9.8349819381837733e-06, 1.093218907044502e-05, 2.6185589376837015e-05, } };
const TfArray<8, int> quant2_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(16) int32_t tensor_data3[16] = { 951, 1921, -420, 201, 710, -426, 585, -1425, 748, 1180, -2121, 796, -499, -545, 369, 242, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<16, float> quant3_scale = { 16, { 9.058439900400117e-05, 3.5714016121346503e-05, 4.5608554501086473e-05, 4.057630940224044e-05, 8.9590743300504982e-05, 5.0633203500183299e-05, 5.6410121032968163e-05, 3.8819351175334305e-05, 9.3464121164288372e-05, 4.1300088923890144e-05, 3.7754805816803128e-05, 5.0300815928494558e-05, 4.115663978154771e-05, 4.8928504838841036e-05, 5.5598658946109936e-05, 4.1378349123988301e-05, } };
const TfArray<16, int> quant3_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int32_t tensor_data4[2] = { -1712, 1712, };
const TfArray<1, int> tensor_dimension4 = { 1, { 2 } };
const TfArray<1, float> quant4_scale = { 1, { 4.7041772631928325e-05, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(16) int8_t tensor_data5[2*400] = { 
  -92, -38, -15, -25, -27, 0, 29, 45, -45, 42, -4, 44, -6, 39, 35, -11, -43, 18, 24, -8, -55, 48, 17, -11, -122, 12, 29, 20, 31, 26, 26, 38, -2, 51, -11, -26, -5, -24, 43, 28, -43, 27, 9, 27, -19, -24, 48, 9, -31, -19, 38, 9, 14, 38, 5, 15, -20, -16, 36, 33, 14, 21, 20, 50, -66, 4, 14, -31, -20, -18, 6, 41, -64, -7, -19, 18, 4, 19, 3, -3, -50, 11, 4, -12, -53, 9, 29, -20, -41, 8, -7, -31, -18, 4, 3, 27, -42, 52, 43, 28, -46, -16, 56, 0, -94, 36, 0, 12, -9, 31, 6, 17, -35, 40, -9, 34, -78, -4, 8, -10, -68, 11, 8, 45, 7, 15, 48, 62, -32, 1, 29, 36, 0, 14, 34, 32, -60, 13, 39, 24, 40, 16, 12, 34, -84, -16, 33, 19, -59, 20, -4, 10, -56, 14, 23, 40, 7, 17, 46, -10, -28, 17, 22, 16, -26, -8, -18, 24, -59, -3, 24, 18, -14, 15, 33, -20, -17, 17, 8, 13, -55, 3, 40, 23, -64, 35, 2, 16, -13, -9, 11, 12, -58, -4, -9, -14, -24, 15, 38, 17, -28, 3, 0, 22, 1, -19, 3, 10, -10, -12, 41, 27, -64, 8, 12, 13, -84, 8, 21, 15, -5, 21, 27, 39, 4, -7, 32, 2, 17, 48, 26, 3, -25, 48, -11, 13, 7, -24, 27, 54, -29, 15, -5, 16, -48, 29, 6, -4, -89, 36, 22, 9, 4, 37, 41, 37, -4, 9, 13, 33, -77, 41, 30, -19, -73, 31, -7, -29, 1, -61, 51, -4, -3, 23, -24, 21, -53, 46, 46, 10, -69, 29, 23, -10, -6, 0, 0, 26, -29, 2, 16, 36, -38, 10, -27, -10, -63, 39, 36, 44, 13, -20, -15, 44, -47, 20, -15, -25, -34, -4, 44, 10, -54, -8, 10, 16, 25, 13, -30, 22, -28, 55, -17, -18, -39, -17, -12, 18, -32, 10, 29, 6, -1, 15, -33, -9, -43, 19, 7, 29, -67, 34, 34, 10, -67, -14, 33, 83, 12, 23, 25, 24, -30, 74, 39, -4, -43, 11, 11, 21, -50, 58, 35, 40, -18, -9, 46, 34, -8, 5, 38, 46, -40, 27, 68, -29, -34, 23, -4, 39, 58, -6, 81, 57, -69, 51, 27, 11, 6, 31, 61, -21, -60, 54, 35, 66, 41, 50, 24, 49, 
  101, -28, 9, 23, 57, -4, 2, -24, 53, -30, 6, -34, 4, -37, -48, -26, 68, -42, 16, 13, 38, -37, -38, 1, 73, -31, 32, -43, -24, -10, -14, 4, -2, -44, 16, -2, 8, -13, -19, -41, 5, 0, 5, 19, -2, -10, -23, 8, 57, 22, -16, 21, -11, -39, -18, 18, 41, -30, 2, -36, -13, -73, -16, -29, 46, 15, -26, -36, 15, -13, 21, -15, 60, -46, -9, -15, -22, -3, -32, -11, 20, 2, 36, -16, 31, -30, 15, 2, 10, -54, 3, -17, 4, 11, 3, -25, 62, -12, 14, -21, 43, 14, -7, -2, 127, -26, -2, -5, -35, -48, 4, -16, 50, -64, 15, -39, 54, -49, -8, 29, 98, -8, 2, -15, -20, -35, -32, -66, 27, -3, -18, 1, 19, -32, -38, -11, 114, -14, -1, -3, -42, 22, -11, -35, 91, -17, -6, 30, 89, -34, 2, -30, 94, 1, 14, -29, 15, -30, -22, -42, 26, 9, 20, 8, 45, -2, 16, 15, 1, -40, 14, -37, -40, 8, 22, -10, 49, 15, -4, 14, 2, -19, -3, -20, 3, 12, 2, 7, 5, 22, -32, -12, 59, 7, -20, -21, 73, -34, -30, -29, 75, -27, 10, 0, 16, 22, 1, 19, 58, -14, -7, -37, 49, -41, -7, -5, 27, 9, -37, -35, 24, -31, -51, -39, 17, 3, -5, 29, 42, -5, -15, -27, 30, -4, 5, -34, 2, -29, 13, -19, -3, -5, 24, 24, 18, -26, -48, 2, 88, 10, -6, -45, 1, -31, -29, -54, 60, 1, 36, -12, 61, 21, 4, 4, 48, -25, -50, 10, 7, 35, -13, 6, 12, -23, -30, -28, -1, -51, -12, -7, 25, -40, -3, -9, -7, -25, 3, -34, 40, -5, -2, -28, -8, -32, -1, 25, 27, -26, 29, -31, -6, -28, 11, 8, -6, -4, 8, -16, 15, -12, 13, -29, 38, -22, 18, -22, 33, -7, -38, -11, 9, 9, 6, 1, 59, 19, -32, 15, 0, -30, -39, -35, 0, 29, -13, 1, 40, -50, -22, 10, 44, -9, -43, 21, 45, -24, 6, -15, -12, -73, -54, -33, 76, -20, -17, -36, 24, -13, -28, -23, 32, -54, -2, -13, -19, 26, -16, -36, 56, -70, -44, -64, 34, -37, -56, 28, 46, -54, -3, -31, -54, -40, -26, -39, 74, -46, 1, -5, 10, 20, -62, 13, 116, -68, -23, -28, 15, -36, -16, -4, 
};
const TfArray<2, int> tensor_dimension5 = { 2, { 2,400 } };
const TfArray<1, float> quant5_scale = { 1, { 0.0034973956644535065, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(16) int8_t tensor_data6[8*1*3*40] = { 
  /* [0][0][][] */ -114,71,-30,44,56,-58,71,92,21,-93,-54,15,-5,73,-35,-78,-23,-3,13,-37,-94,19,-34,16,77,42,-124,5,8,-68,-99,-27,-76,-30,63,22,-84,-50,-19,-109, 51,54,103,-50,-13,70,100,-49,15,-53,49,-48,-43,-52,-14,72,-22,-27,71,-2,-71,-61,37,-40,-17,-127,-107,-17,46,12,-67,59,76,-5,-49,-72,-19,37,-59,-43, -11,-5,28,68,94,39,110,67,-28,-75,-72,-48,8,52,12,47,-49,-69,15,121,62,45,17,-64,47,51,-74,-28,8,82,-75,-18,50,18,-28,-12,112,95,82,-30, 
  /* [1][0][][] */ 39,-69,-102,-32,35,7,-21,-107,10,127,89,-29,61,36,-45,43,-34,16,-22,-33,-42,61,-36,-74,50,75,22,-1,-56,80,10,-27,27,-43,-13,-18,-7,-31,51,48, -16,-77,-95,24,-48,20,19,-91,74,117,45,103,-114,-83,-71,-83,-45,35,-85,-54,40,74,81,27,51,44,-23,-79,-47,15,-22,78,53,18,-23,88,-81,26,106,108, -59,-88,-71,72,37,-100,-58,-119,58,92,26,28,50,8,-92,30,-43,-76,-113,-107,-35,-60,-66,8,-25,37,50,-90,29,-23,-49,30,79,40,17,41,32,27,78,18, 
  /* [2][0][][] */ -62,-16,-10,2,-83,-127,-91,-13,-90,-73,-52,-19,-7,-4,-12,-73,-38,-42,-56,3,-54,-15,-61,-11,-40,-72,-75,-81,-78,-67,-78,-46,-14,-72,-69,-47,-46,-55,-48,-64, -45,6,16,-9,-50,17,7,-17,25,-23,33,-66,31,-6,34,11,53,-8,-7,40,-16,-11,-4,31,21,8,-35,40,22,9,19,41,24,4,5,-29,56,53,0,12, -26,2,80,-9,24,-15,56,36,33,-44,10,-16,52,45,57,15,10,20,21,19,53,20,22,41,16,29,55,53,27,13,49,69,91,51,41,59,56,24,78,0, 
  /* [3][0][][] */ -127,79,-19,92,91,-68,11,76,-32,5,-1,-28,11,72,81,-66,32,18,-55,-37,3,52,54,-76,85,-19,-39,-21,-44,32,-9,-10,-28,-50,-42,-5,-42,101,-3,-70, -60,34,42,-65,64,86,86,44,-38,40,-108,17,-39,-73,-43,70,-9,82,-6,-76,-31,47,35,-87,-17,-21,-53,3,32,22,46,-73,-102,41,-7,-13,-71,-68,62,-84, -24,-39,107,-38,59,-15,94,59,14,-45,4,27,65,-1,39,-70,58,45,45,65,-15,-53,-89,-90,-49,-47,-113,71,-64,-32,-91,-105,-78,50,33,44,-85,-6,54,64, 
  /* [4][0][][] */ 43,-52,-127,34,65,-56,-14,-18,-68,84,94,100,-36,1,-48,-74,-19,-63,-75,-80,-7,-13,7,-69,15,48,12,-44,63,-53,16,-38,72,-24,-34,-23,59,64,-11,63, 31,-29,-87,17,63,18,-99,-77,6,58,78,-22,-111,-54,-115,-51,19,-64,-107,12,-31,-66,-51,48,13,84,-34,14,-1,8,81,61,-19,2,88,39,43,-72,53,13, 0,-94,-10,33,49,-47,-95,-64,12,79,99,-7,8,-35,-65,-88,-107,-13,-46,-13,10,-28,58,-75,49,-28,23,20,35,-54,-46,0,25,2,39,84,34,21,61,74, 
  /* [5][0][][] */ 53,-62,-53,12,2,-41,-61,-68,37,-32,31,37,34,-34,-74,-1,10,49,-86,20,-8,19,41,-28,0,-18,82,-50,-38,28,80,43,-58,-4,-12,73,-4,-42,-12,-3, -21,-108,-127,56,-23,27,-18,-5,-68,109,11,-41,-84,-85,-67,-41,5,-54,9,-96,-61,-85,-60,-75,-23,28,52,20,-63,70,55,72,9,43,51,52,-84,55,44,32, 13,-43,-78,-60,13,-40,17,31,61,-41,21,97,19,36,-26,60,19,-46,6,-8,-8,-29,6,-40,41,87,60,-11,30,59,-5,-34,-64,-60,85,-52,-51,-18,14,87, 
  /* [6][0][][] */ -127,-72,-99,-46,-4,-16,104,65,-68,43,-43,-7,2,-49,5,-12,20,-36,-9,-48,-54,-13,-20,30,-43,-110,-113,-29,64,-63,-98,-84,-32,49,-19,35,15,-46,-60,39, -90,-51,-30,52,-1,19,-8,-45,-23,-26,-2,-31,-26,-34,-81,33,-40,-13,-58,72,-5,13,33,7,-86,-82,-103,-54,37,-34,-7,-58,-63,-72,-16,7,13,65,-20,20, -88,100,78,33,41,-12,102,69,30,44,16,-2,-8,-4,4,-5,-44,-41,17,81,49,-1,-9,15,-68,-81,13,-2,88,-24,-6,-25,18,64,69,48,62,15,51,39, 
  /* [7][0][][] */ -104,-22,-12,19,17,-46,16,37,-26,-14,-51,-39,5,16,7,-5,-20,-3,48,-19,15,-19,15,32,36,0,-38,-29,28,19,-36,-26,7,-13,-6,-16,45,10,21,11, -90,1,-2,14,-29,-21,29,28,11,-26,-31,-35,-24,-26,24,-44,5,-13,35,-18,-16,-27,13,-19,34,-2,-14,-14,31,21,-1,-13,-7,18,-29,-31,-9,47,17,-21, -127,-36,-34,-14,11,-12,37,40,-37,-18,-50,-48,-13,3,-15,-2,-9,-12,14,-7,-12,2,-22,-13,-9,-9,-13,6,-27,-1,-38,-34,-38,-4,1,5,-8,3,-1,20, 
};
const TfArray<4, int> tensor_dimension6 = { 4, { 8,1,3,40 } };
const TfArray<8, float> quant6_scale = { 8, { 0.0021145406644791365, 0.0024508046917617321, 0.0045270053669810295, 0.0023011879529803991, 0.0028888534288853407, 0.0026530066970735788, 0.0029489805456250906, 0.0070636169984936714, } };
const TfArray<8, int> quant6_zero = { 8, { 0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(16) int8_t tensor_data7[16*1*3*8] = { 
  /* [0][0][][] */ -27,-31,-20,51,-19,-42,52,21, 42,-30,-13,-2,-20,-47,34,13, 38,-31,127,44,7,36,60,31, 
  /* [1][0][][] */ -68,86,-127,-81,26,-44,40,-18, -105,-80,-77,17,-32,29,-34,-80, 66,101,-76,82,109,-37,-105,-12, 
  /* [2][0][][] */ -97,43,23,-77,16,45,-69,-127, 53,-29,14,58,34,-70,-72,18, -45,-82,-18,-88,40,-1,32,-29, 
  /* [3][0][][] */ -83,45,-70,-4,35,83,-96,37, -53,1,-56,69,127,91,2,-61, -14,-82,15,0,6,67,21,-68, 
  /* [4][0][][] */ 10,7,63,6,12,-29,-3,43, -33,-15,55,-8,-31,-32,19,70, 53,-42,127,46,-37,42,-9,59, 
  /* [5][0][][] */ 33,-32,-76,36,94,79,-33,48, -68,-44,-127,25,69,68,-91,-78, -36,22,-86,-8,90,10,-100,15, 
  /* [6][0][][] */ 43,25,-45,46,52,30,-55,-15, 8,15,-63,-79,42,70,-36,-127, -51,71,-76,-42,84,-41,-60,-52, 
  /* [7][0][][] */ -50,-85,112,-42,-49,62,64,14, 33,-91,-90,9,75,33,44,-112, -125,-127,-69,-17,45,-5,-59,52, 
  /* [8][0][][] */ -9,-32,84,3,-18,-20,21,55, 17,-32,24,59,22,2,31,52, 20,-27,127,-20,1,-34,50,28, 
  /* [9][0][][] */ -48,-78,-91,-39,127,76,-110,-93, -31,106,-33,-105,86,34,38,-120, -87,6,-50,-8,69,-18,23,-27, 
  /* [10][0][][] */ -7,-5,4,-16,-24,-111,-64,3, 96,-4,-26,14,86,14,87,-111, -5,-26,-26,-127,-62,-61,89,-53, 
  /* [11][0][][] */ -9,-34,-76,36,27,-40,38,-33, -46,81,-11,-45,12,1,17,50, 21,41,-100,46,127,-46,55,-13, 
  /* [12][0][][] */ 65,-9,-127,-33,57,55,14,-118, -31,-11,13,-12,79,-99,49,2, -4,29,-33,-68,-21,37,-2,18, 
  /* [13][0][][] */ -41,40,-127,46,-47,-61,-13,-120, -61,-16,65,-39,114,8,-43,-102, -51,-46,-42,33,53,32,34,-53, 
  /* [14][0][][] */ -7,16,-19,19,-31,76,-47,-109, 8,53,-127,5,104,2,-10,-57, -49,75,-54,-56,42,37,-6,-43, 
  /* [15][0][][] */ 55,54,-111,39,-9,-80,-78,-61, -47,43,-113,-95,127,76,95,-32, 46,-51,-44,-84,21,53,-56,-24, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,8 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0062171313911676407, 0.0024511807132512331, 0.003130278317257762, 0.0027848973404616117, 0.0061489329673349857, 0.0034751377534121275, 0.0038716283161193132, 0.0026643108576536179, 0.0064147766679525375, 0.0028345726896077394, 0.0025912474375218153, 0.0034523247741162777, 0.0028247274458408356, 0.0033581382595002651, 0.0038159347604960203, 0.0028399440925568342, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(16) int32_t tensor_data8[4] = { 1, 1, 99, 40, };
const TfArray<1, int> tensor_dimension8 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data9[4] = { 1, 99, 1, 8, };
const TfArray<1, int> tensor_dimension9 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data10[4] = { 1, 1, 50, 8, };
const TfArray<1, int> tensor_dimension10 = { 1, { 4 } };
const ALIGN(16) int32_t tensor_data11[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension11 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension12 = { 4, { 1,1,99,40 } };
const TfArray<1, float> quant12_scale = { 1, { 0.0037071078550070524, } };
const TfArray<1, int> quant12_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant12 = { (TfLiteFloatArray*)&quant12_scale, (TfLiteIntArray*)&quant12_zero, 0 };
const TfArray<4, int> tensor_dimension13 = { 4, { 1,1,99,8 } };
const TfArray<1, float> quant13_scale = { 1, { 0.014570128172636032, } };
const TfArray<1, int> quant13_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant13 = { (TfLiteFloatArray*)&quant13_scale, (TfLiteIntArray*)&quant13_zero, 0 };
const TfArray<4, int> tensor_dimension14 = { 4, { 1,99,1,8 } };
const TfArray<1, float> quant14_scale = { 1, { 0.014570128172636032, } };
const TfArray<1, int> quant14_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant14 = { (TfLiteFloatArray*)&quant14_scale, (TfLiteIntArray*)&quant14_zero, 0 };
const TfArray<4, int> tensor_dimension15 = { 4, { 1,50,1,8 } };
const TfArray<1, float> quant15_scale = { 1, { 0.014570128172636032, } };
const TfArray<1, int> quant15_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant15 = { (TfLiteFloatArray*)&quant15_scale, (TfLiteIntArray*)&quant15_zero, 0 };
const TfArray<4, int> tensor_dimension16 = { 4, { 1,1,50,8 } };
const TfArray<1, float> quant16_scale = { 1, { 0.014570128172636032, } };
const TfArray<1, int> quant16_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant16 = { (TfLiteFloatArray*)&quant16_scale, (TfLiteIntArray*)&quant16_zero, 0 };
const TfArray<4, int> tensor_dimension17 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant17_scale = { 1, { 0.013450515456497669, } };
const TfArray<1, int> quant17_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant17 = { (TfLiteFloatArray*)&quant17_scale, (TfLiteIntArray*)&quant17_zero, 0 };
const TfArray<4, int> tensor_dimension18 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant18_scale = { 1, { 0.013450515456497669, } };
const TfArray<1, int> quant18_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant18 = { (TfLiteFloatArray*)&quant18_scale, (TfLiteIntArray*)&quant18_zero, 0 };
const TfArray<4, int> tensor_dimension19 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant19_scale = { 1, { 0.013450515456497669, } };
const TfArray<1, int> quant19_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant19 = { (TfLiteFloatArray*)&quant19_scale, (TfLiteIntArray*)&quant19_zero, 0 };
const TfArray<2, int> tensor_dimension20 = { 2, { 1,400 } };
const TfArray<1, float> quant20_scale = { 1, { 0.013450515456497669, } };
const TfArray<1, int> quant20_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant20 = { (TfLiteFloatArray*)&quant20_scale, (TfLiteIntArray*)&quant20_zero, 0 };
const TfArray<2, int> tensor_dimension21 = { 2, { 1,2 } };
const TfArray<1, float> quant21_scale = { 1, { 0.065589070320129395, } };
const TfArray<1, int> quant21_zero = { 1, { -6 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<2, int> tensor_dimension22 = { 2, { 1,2 } };
const TfArray<1, float> quant22_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant22_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,8 } };
const TfArray<1, int> outputs0 = { 1, { 12 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 12,6,2 } };
const TfArray<1, int> outputs1 = { 1, { 13 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 13,9 } };
const TfArray<1, int> outputs2 = { 1, { 14 } };
const TfLitePoolParams opdata3 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs3 = { 1, { 14 } };
const TfArray<1, int> outputs3 = { 1, { 15 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 15,10 } };
const TfArray<1, int> outputs4 = { 1, { 16 } };
const TfLiteConvParams opdata5 = { kTfLitePaddingSame, 1,1, kTfLiteActRelu, 1,1 };
const TfArray<3, int> inputs5 = { 3, { 16,7,3 } };
const TfArray<1, int> outputs5 = { 1, { 17 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 17,11 } };
const TfArray<1, int> outputs6 = { 1, { 18 } };
const TfLitePoolParams opdata7 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs7 = { 1, { 18 } };
const TfArray<1, int> outputs7 = { 1, { 19 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 19,1 } };
const TfArray<1, int> outputs8 = { 1, { 20 } };
const TfLiteFullyConnectedParams opdata9 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs9 = { 3, { 20,5,4 } };
const TfArray<1, int> outputs9 = { 1, { 21 } };
const TfLiteSoftmaxParams opdata10 = { 1 };
const TfArray<1, int> inputs10 = { 1, { 21 } };
const TfArray<1, int> outputs10 = { 1, { 22 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension0, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 8, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 384, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension12, 3960, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant12))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 3968, (TfLiteIntArray*)&tensor_dimension13, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant13))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension14, 792, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant14))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension15, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant15))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension16, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant16))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension17, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant17))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension18, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant18))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension19, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant19))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension20, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant20))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension21, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension22, 2, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_SOFTMAX, },
};
static void* overflow_buffers[EI_MAX_OVERFLOW_BUFFER_COUNT];
static size_t overflow_buffers_ix = 0;
static void * AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                       size_t bytes) {
  void *ptr;
  if (current_location - bytes < tensor_boundary) {
    if (overflow_buffers_ix > EI_MAX_OVERFLOW_BUFFER_COUNT - 1) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d, does not fit in tensor arena and reached EI_MAX_OVERFLOW_BUFFER_COUNT\n",
        (int)bytes);
      return NULL;
    }

    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    ptr = ei_calloc(bytes, 1);
    if (ptr == NULL) {
      ei_printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return NULL;
    }
    overflow_buffers[overflow_buffers_ix++] = ptr;
    return ptr;
  }

  current_location -= bytes;

  ptr = current_location;
  memset(ptr, 0, bytes);

  return ptr;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static scratch_buffer_t scratch_buffers[EI_MAX_SCRATCH_BUFFER_COUNT];
static size_t scratch_buffers_ix = 0;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  if (scratch_buffers_ix > EI_MAX_SCRATCH_BUFFER_COUNT - 1) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d, reached EI_MAX_SCRATCH_BUFFER_COUNT\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffer_t b;
  b.bytes = bytes;

  b.ptr = AllocatePersistentBuffer(ctx, b.bytes);
  if (!b.ptr) {
    ei_printf("ERR: Failed to allocate scratch buffer of size %d\n",
      (int)bytes);
    return kTfLiteError;
  }

  scratch_buffers[scratch_buffers_ix] = b;
  *buffer_idx = scratch_buffers_ix;

  scratch_buffers_ix++;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > (int)scratch_buffers_ix) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}

static TfLiteTensor* GetTensor(const struct TfLiteContext* context,
                               int tensor_idx) {
  return &tflTensors[tensor_idx];
}

static TfLiteEvalTensor* GetEvalTensor(const struct TfLiteContext* context,
                                       int tensor_idx) {
  return &tflEvalTensors[tensor_idx];
}

} // namespace

TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    ei_printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#else
  memset(tensor_arena, 0, kTensorArenaSize);
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.GetTensor = &GetTensor;
  ctx.GetEvalTensor = &GetEvalTensor;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 23;
  for (size_t i = 0; i < 23; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflEvalTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;
    tflEvalTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
     tflEvalTensors[i].data.data =  start;
    }
    else {
       tflTensors[i].data.data = tensorData[i].data;
       tflEvalTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
    tflEvalTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    ei_printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = Register_RESHAPE();
  registrations[OP_CONV_2D] = Register_CONV_2D();
  registrations[OP_MAX_POOL_2D] = Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = Register_SOFTMAX();

  for (size_t i = 0; i < 11; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
tflNodes[i].custom_initial_data = nullptr;
      tflNodes[i].custom_initial_data_size = 0;
if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for (size_t i = 0; i < 11; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  22, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for (size_t i = 0; i < 11; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif

  // scratch buffers are allocated within the arena, so just reset the counter so memory can be reused
  scratch_buffers_ix = 0;

  // overflow buffers are on the heap, so free them first
  for (size_t ix = 0; ix < overflow_buffers_ix; ix++) {
    ei_free(overflow_buffers[ix]);
  }
  overflow_buffers_ix = 0;
  return kTfLiteOk;
}
